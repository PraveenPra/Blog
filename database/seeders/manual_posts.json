[{"id":1,"user_id":1,"title":"First Post","body":"<p><span style=\"background-color: rgb(255, 255, 0);\">This is the bod<\/span>y of the <span style=\"color: rgb(230, 0, 0);\">first <\/span><strong><u>post<\/u><\/strong>.<\/p>","category_id":1,"created_at":"2024-06-19T11:41:00.000000Z","updated_at":"2024-06-19T20:26:49.000000Z"},{"id":2,"user_id":1,"title":"Blade directives","body":"<p>To use the formatShortTime method directly in your Blade templates for all comments, you can create a custom Blade directive. This directive will allow you to pass a date\/time string or a Carbon instance directly to it and display the formatted short time directly in your views. Here\u2019s how you can implement it:<\/p><p><br><\/p><p><strong>Step 1:<\/strong> Create a Blade Directive Create a Blade directive: Blade directives allow you to define custom PHP functions that are accessible in your Blade templates.<\/p><p><br><\/p><p><u>php code<\/u><\/p><p><br><\/p><p>\/\/ In your AppServiceProvider or a dedicated service provider for directives<\/p><p>namespace App\\Providers;<\/p><p>use Illuminate\\Support\\Facades\\Blade;<\/p><p>use Illuminate\\Support\\ServiceProvider;<\/p><p>use App\\Traits\\DateHelperTrait;<\/p><p><br><\/p><p>class AppServiceProvider extends ServiceProvider<\/p><p>{<\/p><p> public function boot() { <\/p><p>Blade::directive('shortTime', function ($expression) { <\/p><p>return \"\";<\/p><p> }); <\/p><p>} <\/p><p>}<\/p><p><br><\/p><p><strong> Step 2: <\/strong>Usage in Blade Templates Use the directive in your Blade templates: Once the directive is registered, you can use it anywhere in your Blade files to format dates. <\/p><p><br><\/p><p><u>blade code<\/u><\/p><p><br><\/p><p> @foreach ($comments as $comment)<\/p><p><img src=\"{{ $comment->user->profile_picture }}\" alt=\"Profile Picture\">{{ $comment-&gt;content }}<\/p><p>Posted @shortTime($comment-&gt;created_at)<\/p><p>@endforeach <\/p><p><br><\/p><p><u>Explanation: <\/u>Blade Directive Registration: In the boot method of your AppServiceProvider, you register a Blade directive @shortTime that takes an expression (typically a date or a Carbon instance) and calls the formatShortTime method from your DateHelperTrait. <\/p><p><br><\/p><p><u>Directive Usage:<\/u> In your Blade template (comments.blade.php in this example), you can now use @shortTime($comment-&gt;created_at) directly to display the formatted short time for each comment's creation date. Benefits: Direct Usage: Simplifies the display of formatted dates in Blade templates without needing to pass formatted dates from controllers.<\/p><p><br><\/p><p><u>Consistency<\/u>: Ensures that all date formatting follows the same logic across your application. <\/p><p><br><\/p><p><u>Flexibility<\/u>: Allows you to easily adjust the formatting logic by modifying the formatShortTime method in the DateHelperTrait as per your requirements. By implementing this approach, you enhance the readability and maintainability of your Blade templates while ensuring consistent and user-friendly date\/time formatting for comments and other entities in your application. Adjust the directive and method as needed to accommodate any additional formatting requirements or preferences you may have.<\/p>","category_id":1,"created_at":"2024-06-19T19:12:10.000000Z","updated_at":"2024-06-19T20:14:13.000000Z"},{"id":3,"user_id":1,"title":"Backup manually added posts(or data) and re-seeded after the migration","body":"<p>it's possible to keep your manually added posts and ensure they are not lost during migrations while developing. Here are a few strategies you can use:<\/p><p><br><\/p><p> <strong>1. Use Database Backups<\/strong><\/p><p><strong> <\/strong>One way to handle this is by creating a database backup of your manually added posts. You can restore this backup after running your migrations. Tools like mysqldump for MySQL or pg_dump for PostgreSQL can be useful. <\/p><p><br><\/p><p><strong>2. Export Data to Seeder <\/strong><\/p><p>You can export your manually added posts to a seeder file. This way, you can seed your database with both initial data and manually added data during development. To export your manually added posts to a JSON file, you should perform this action before you run any migrations that would reset your database. This will ensure that your manually added posts are backed up and can be re-seeded after the migration.<\/p><p> Here's a step-by-step guide on how to do it: <\/p><p><br><\/p><p><strong>Step 1: Export Manually Added Posts to a JSON File<\/strong><\/p><p> Create an Artisan Command to Export Posts Create a new Artisan command to export the posts. This way, you can run this command whenever you need to backup your posts. Run the following command to generate a new command:<\/p><p><br><\/p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">php artisan make:command ExportPosts <\/div><\/div><p><br><\/p><p>Define the Command Logic. <\/p><p>Open the newly created command file (app\/Console\/Commands\/ExportPosts.php) and define the logic to export posts to a JSON file. <\/p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"> namespace App\\Console\\Commands; <\/div><div class=\"ql-code-block\">use Illuminate\\Console\\Command; <\/div><div class=\"ql-code-block\">use App\\Models\\Post; <\/div><div class=\"ql-code-block\">use Illuminate\\Support\\Facades\\File;<\/div><div class=\"ql-code-block\"> class ExportPosts extends Command <\/div><div class=\"ql-code-block\">{<\/div><div class=\"ql-code-block\"> \/** * The name and signature of the console command.<\/div><div class=\"ql-code-block\"> * * @var string *\/ protected $signature = 'export:posts'; <\/div><div class=\"ql-code-block\">\/** * The console command description. * * @var string *\/ protected $description = 'Export posts to a JSON file'; \/** * Execute the console command. * * @return int *\/ public function handle() { $posts = Post::all(); File::put('database\/seeders\/manual_posts.json', $posts-&gt;toJson()); $this-&gt;info('Posts have been exported to database\/seeders\/manual_posts.json'); return 0; <\/div><div class=\"ql-code-block\">}<\/div><div class=\"ql-code-block\"> }<\/div><\/div><p> Run the Command to Export Posts. This will automatically create a json file insdie your seeder folder.<\/p><p> Run the command whenever you need to backup your posts: <\/p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">php artisan export:posts <\/div><\/div><p><br><\/p><p><strong>Step 2: Create a Seeder to Import the JSON Data <\/strong><\/p><p><br><\/p><p>Create a Seeder to Import the JSON Data Create a new seeder to import the JSON data back into the database.<\/p><p> Run the following command to generate a new seeder:<\/p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">php artisan make:seeder ManualPostsSeeder <\/div><\/div><p>Define the Seeder Logic Open the newly created seeder file (database\/seeders\/ManualPostsSeeder.php) and define the logic to import the JSON data. <\/p><blockquote>Note:The error indicates that the datetime format in your JSON file is not compatible with MySQL's datetime format. MySQL expects the datetime to be in the format Y-m-d H:i:s. To resolve this, we need to ensure that the datetimes in the JSON file are correctly formatted before inserting them into the database. <\/blockquote><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">namespace Database\\Seeders;<\/div><div class=\"ql-code-block\"> use Illuminate\\Database\\Seeder; <\/div><div class=\"ql-code-block\">use App\\Models\\Post; use Illuminate\\Support\\Facades\\File; use Carbon\\Carbon; class ManualPostsSeeder extends Seeder { \/** * Run the database seeds. * * @return void *\/ public function run() { \/\/ Define the file path $filePath = 'database\/seeders\/manual_posts.json'; \/\/ Check if the file exists if (File::exists($filePath)) { \/\/ Read the JSON data from the file $json = File::get($filePath); \/\/ Decode the JSON data into an array $posts = json_decode($json, true); \/\/ Iterate over each post and format the datetime fields foreach ($posts as &amp;$postData) { if (isset($postData['created_at'])) { $postData['created_at'] = Carbon::parse($postData['created_at'])-&gt;format('Y-m-d H:i:s'); } if (isset($postData['updated_at'])) { $postData['updated_at'] = Carbon::parse($postData['updated_at'])-&gt;format('Y-m-d H:i:s'); } } \/\/ Insert the posts into the database Post::insert($posts); } else { \/\/ Inform the user that the file was not found $this-&gt;command-&gt;info('Manual posts JSON file not found.'); <\/div><div class=\"ql-code-block\">}<\/div><div class=\"ql-code-block\"> }<\/div><div class=\"ql-code-block\">  }<\/div><\/div><p><br><\/p><p> <u>JSON Data Format:<\/u> <\/p><p>Make sure the JSON data in manual_posts.json is in the correct format. Here\u2019s an example of what the JSON file might look like:<\/p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\"> [ { \"title\": \"First Post\", \"body\": \"This is the body of the first post.\", \"category_id\": 1, \"user_id\": 1, \"created_at\": \"2023-06-01T12:00:00.000000Z\", \"updated_at\": \"2023-06-01T12:00:00.000000Z\" }, { \"title\": \"Second Post\", \"body\": \"This is the body of the second post.\", \"category_id\": 2, \"user_id\": 1, \"created_at\": \"2023-06-02T12:00:00.000000Z\", \"updated_at\": \"2023-06-02T12:00:00.000000Z\" } ] <\/div><\/div><p><br><\/p><p><strong>Running the Seeder: <\/strong>Now you can run the seeder using: <\/p><div class=\"ql-code-block-container\" spellcheck=\"false\"><div class=\"ql-code-block\">php artisan db:seed --class=ManualPostsSeeder <\/div><\/div><p>This should correctly insert the posts with properly formatted datetime fields into the database.<\/p><p><br><\/p><p> <strong>Summary <\/strong><\/p><p>By following these steps, you will create an automated process to export your manually added posts to a JSON file and import them back into the database after running migrations. This ensures that your manually added data is preserved and re-seeded during development.<\/p>","category_id":1,"created_at":"2024-06-20T15:16:18.000000Z","updated_at":"2024-06-20T15:26:00.000000Z"}]